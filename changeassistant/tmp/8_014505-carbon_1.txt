14505-carbon	org.eclipse.swt.dnd.DragSource  DragSource(Control, int)  (start position = 5415  length = 2544)
/** 
 * Creates a new <code>DragSource</code> to handle dragging from the specified <code>Control</code>.
 * Creating an instance of a DragSource may cause system resources to be allocated depending on the platform.  
 * It is therefore mandatory that the DragSource instance be disposed when no longer required.
 * @param control the <code>Control</code> that the user clicks on to initiate the drag
 * @param style the bitwise OR'ing of allowed operations; this may be a combination of any of 
 * DND.DROP_NONE, DND.DROP_COPY, DND.DROP_MOVE, DND.DROP_LINK
 * @exception SWTException <ul>
 * <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
 * <li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
 * </ul>
 * @exception SWTError <ul>
 * <li>ERROR_CANNOT_INIT_DRAG - unable to initiate drag source; this will occur if more than one
 * drag source is created for a control or if the operating system will not allow the creation
 * of the drag source</li>
 * </ul>
 * <p>NOTE: ERROR_CANNOT_INIT_DRAG should be an SWTException, since it is a
 * recoverable error, but can not be changed due to backward compatability.</p>
 * @see Widget#dispose
 * @see DragSource#checkSubclass
 * @see DND#DROP_NONE
 * @see DND#DROP_COPY
 * @see DND#DROP_MOVE
 * @see DND#DROP_LINK
 */
public DragSource(Control control,int style){
  super(control,checkStyle(style));
  this.control=control;
  Object effect=control.getData(DEFAULT_DROP_TARGET_EFFECT);
  if (effect instanceof DropTargetEffect) {
    dropEffect=(DropTargetEffect)effect;
  }
  if (control.getData(DRAGSOURCEID) != null) {
    DND.error(DND.ERROR_CANNOT_INIT_DRAG);
  }
  control.setData(DRAGSOURCEID,this);
  controlListener=new Listener(){
    public void handleEvent(    Event event){
      if (event.type == SWT.Dispose) {
        if (!DragSource.this.isDisposed()) {
          DragSource.this.dispose();
        }
      }
      if (event.type == SWT.DragDetect) {
        if (!DragSource.this.isDisposed()) {
          DragSource.this.drag(event);
        }
      }
    }
  }
;
  control.addListener(SWT.Dispose,controlListener);
  control.addListener(SWT.DragDetect,controlListener);
  this.addListener(SWT.Dispose,new Listener(){
    public void handleEvent(    Event e){
      onDispose();
    }
  }
);
}

14505-carbon	org.eclipse.swt.dnd.DropTarget  DropTarget(Control, int)  (start position = 4810  length = 4273)
/** 
 * Creates a new <code>DropTarget</code> to allow data to be dropped on the specified 
 * <code>Control</code>.
 * Creating an instance of a DropTarget may cause system resources to be allocated 
 * depending on the platform.  It is therefore mandatory that the DropTarget instance 
 * be disposed when no longer required.
 * @param control the <code>Control</code> over which the user positions the cursor to drop the data
 * @param style the bitwise OR'ing of allowed operations; this may be a combination of any of 
 * DND.DROP_NONE, DND.DROP_COPY, DND.DROP_MOVE, DND.DROP_LINK
 * @exception SWTException <ul>
 * <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
 * <li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
 * </ul>
 * @exception SWTError <ul>
 * <li>ERROR_CANNOT_INIT_DROP - unable to initiate drop target; this will occur if more than one
 * drop target is created for a control or if the operating system will not allow the creation
 * of the drop target</li>
 * </ul>
 * <p>NOTE: ERROR_CANNOT_INIT_DROP should be an SWTException, since it is a
 * recoverable error, but can not be changed due to backward compatability.</p>
 * @see Widget#dispose
 * @see DropTarget#checkSubclass
 * @see DND#DROP_NONE
 * @see DND#DROP_COPY
 * @see DND#DROP_MOVE
 * @see DND#DROP_LINK
 */
public DropTarget(Control control,int style){
  super(control,checkStyle(style));
  this.control=control;
  Object effect=control.getData(DEFAULT_DROP_TARGET_EFFECT);
  if (effect instanceof DropTargetEffect) {
    dropEffect=(DropTargetEffect)effect;
  }
  if (DragTrackingHandler == null || DragTrackingHandler == null) {
    DND.error(DND.ERROR_CANNOT_INIT_DROP);
  }
  if (control.getData(DROPTARGETID) != null) {
    DND.error(DND.ERROR_CANNOT_INIT_DROP);
  }
  control.setData(DROPTARGETID,this);
  controlListener=new Listener(){
    public void handleEvent(    Event event){
      if (!DropTarget.this.isDisposed()) {
        DropTarget.this.dispose();
      }
    }
  }
;
  control.addListener(SWT.Dispose,controlListener);
  this.addListener(SWT.Dispose,new Listener(){
    public void handleEvent(    Event event){
      onDispose();
    }
  }
);
  dragOverHeartbeat=new Runnable(){
    public void run(){
      Control control=DropTarget.this.control;
      if (control == null || control.isDisposed() || dragOverStart == 0) {
        return;
      }
      long time=System.currentTimeMillis();
      int delay=DRAGOVER_HYSTERESIS;
      if (time < dragOverStart) {
        delay=(int)(dragOverStart - time);
      }
 else {
        int allowedOperations=dragOverEvent.operations;
        TransferData[] allowedTypes=dragOverEvent.dataTypes;
        TransferData[] dataTypes=new TransferData[allowedTypes.length];
        System.arraycopy(allowedTypes,0,dataTypes,0,dataTypes.length);
        DNDEvent event=new DNDEvent();
        event.widget=dragOverEvent.widget;
        event.x=dragOverEvent.x;
        event.y=dragOverEvent.y;
        event.time=(int)time;
        event.feedback=DND.FEEDBACK_SELECT;
        event.dataTypes=dataTypes;
        event.dataType=selectedDataType;
        event.operations=dragOverEvent.operations;
        event.detail=selectedOperation;
        event.item=effect.getItem(event.x,event.y);
        selectedDataType=null;
        selectedOperation=DND.DROP_NONE;
        notifyListeners(DND.DragOver,event);
        effect.showDropTargetEffect(event.feedback,DND.DragOver,event.x,event.y);
        if (event.dataType != null) {
          for (int i=0; i < allowedTypes.length; i++) {
            if (allowedTypes[i].type == event.dataType.type) {
              selectedDataType=event.dataType;
              break;
            }
          }
        }
        if (selectedDataType != null && (event.detail & allowedOperations) != 0) {
          selectedOperation=event.detail;
        }
      }
      control=DropTarget.this.control;
      if (control == null || control.isDisposed()) {
        return;
      }
      control.getDisplay().timerExec(delay,dragOverHeartbeat);
    }
  }
;
}

There are 2 methods found and changed

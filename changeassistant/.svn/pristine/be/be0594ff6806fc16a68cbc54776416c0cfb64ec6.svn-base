14502-win32	org.eclipse.swt.dnd.DragSource  DragSource(Control, int)  (start position = 5294  length = 2456)
/** 
 * Creates a new <code>DragSource</code> to handle dragging from the specified <code>Control</code>.
 * Creating an instance of a DragSource may cause system resources to be allocated depending on the platform.  
 * It is therefore mandatory that the DragSource instance be disposed when no longer required.
 * @param control the <code>Control</code> that the user clicks on to initiate the drag
 * @param style the bitwise OR'ing of allowed operations; this may be a combination of any of 
 * DND.DROP_NONE, DND.DROP_COPY, DND.DROP_MOVE, DND.DROP_LINK
 * @exception SWTException <ul>
 * <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
 * <li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
 * </ul>
 * @exception SWTError <ul>
 * <li>ERROR_CANNOT_INIT_DRAG - unable to initiate drag source; this will occur if more than one
 * drag source is created for a control or if the operating system will not allow the creation
 * of the drag source</li>
 * </ul>
 * <p>NOTE: ERROR_CANNOT_INIT_DRAG should be an SWTException, since it is a
 * recoverable error, but can not be changed due to backward compatability.</p>
 * @see Widget#dispose
 * @see DragSource#checkSubclass
 * @see DND#DROP_NONE
 * @see DND#DROP_COPY
 * @see DND#DROP_MOVE
 * @see DND#DROP_LINK
 */
public DragSource(Control control,int style){
  super(control,checkStyle(style));
  this.control=control;
  Object effect=control.getData(v$_0_);
  if (effect instanceof t$_0_) {
    v$_1_=(t$_0_)effect;
  }
  if (control.getData(DRAGSOURCEID) != null) {
    DND.error(DND.ERROR_CANNOT_INIT_DRAG);
  }
  control.setData(DRAGSOURCEID,this);
  createCOMInterfaces();
  this.AddRef();
  controlListener=new Listener(){
    public void handleEvent(    Event event){
      if (event.type == SWT.Dispose) {
        if (!DragSource.this.isDisposed()) {
          DragSource.this.dispose();
        }
      }
      if (event.type == SWT.DragDetect) {
        if (!DragSource.this.isDisposed()) {
          DragSource.this.drag(event);
        }
      }
    }
  }
;
  control.addListener(SWT.Dispose,controlListener);
  control.addListener(SWT.DragDetect,controlListener);
  this.addListener(SWT.Dispose,new Listener(){
    public void handleEvent(    Event e){
      DragSource.this.onDispose();
    }
  }
);
  if (control instanceof Tree) {
    v$_1_=new t$_3_();
  }
 else   if (control instanceof Table) {
    effect=new TableDragAndDropEffect((Table)control);
  }
 else {
  }
}

14502-win32	org.eclipse.swt.dnd.DropTarget  DropTarget(Control, int)  (start position = 4000  length = 2632)
/** 
 * Creates a new <code>DropTarget</code> to allow data to be dropped on the specified 
 * <code>Control</code>.
 * Creating an instance of a DropTarget may cause system resources to be allocated 
 * depending on the platform.  It is therefore mandatory that the DropTarget instance 
 * be disposed when no longer required.
 * @param control the <code>Control</code> over which the user positions the cursor to drop the data
 * @param style the bitwise OR'ing of allowed operations; this may be a combination of any of 
 * DND.DROP_NONE, DND.DROP_COPY, DND.DROP_MOVE, DND.DROP_LINK
 * @exception SWTException <ul>
 * <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>
 * <li>ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass</li>
 * </ul>
 * @exception SWTError <ul>
 * <li>ERROR_CANNOT_INIT_DROP - unable to initiate drop target; this will occur if more than one
 * drop target is created for a control or if the operating system will not allow the creation
 * of the drop target</li>
 * </ul>
 * <p>NOTE: ERROR_CANNOT_INIT_DROP should be an SWTException, since it is a
 * recoverable error, but can not be changed due to backward compatability.</p>
 * @see Widget#dispose
 * @see DropTarget#checkSubclass
 * @see DND#DROP_NONE
 * @see DND#DROP_COPY
 * @see DND#DROP_MOVE
 * @see DND#DROP_LINK
 */
public DropTarget(Control control,int style){
  super(control,checkStyle(style));
  this.control=control;
  Object effect=control.getData(v$_0_);
  if (effect instanceof t$_0_) {
    v$_1_=(t$_0_)effect;
  }
  if (control.getData(DROPTARGETID) != null) {
    DND.error(DND.ERROR_CANNOT_INIT_DROP);
  }
  control.setData(DROPTARGETID,this);
  createCOMInterfaces();
  this.AddRef();
  if (COM.CoLockObjectExternal(iDropTarget.getAddress(),true,true) != COM.S_OK) {
    DND.error(DND.ERROR_CANNOT_INIT_DROP);
  }
  if (COM.RegisterDragDrop(control.handle,iDropTarget.getAddress()) != COM.S_OK) {
    DND.error(DND.ERROR_CANNOT_INIT_DROP);
  }
  controlListener=new Listener(){
    public void handleEvent(    Event event){
      if (!DropTarget.this.isDisposed()) {
        DropTarget.this.dispose();
      }
    }
  }
;
  control.addListener(SWT.Dispose,controlListener);
  this.addListener(SWT.Dispose,new Listener(){
    public void handleEvent(    Event event){
      onDispose();
    }
  }
);
  if (control instanceof Tree) {
    v$_1_=new t$_3_();
  }
 else   if (control instanceof Table) {
    effect=new TableDragAndDropEffect((Table)control);
  }
 else   if (control instanceof StyledText) {
    effect=new StyledTextDragAndDropEffect((StyledText)control);
  }
 else {
  }
}

